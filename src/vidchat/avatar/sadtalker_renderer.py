"""
SadTalker avatar renderer - generates realistic talking head videos.

Uses SadTalker (https://github.com/OpenTalker/SadTalker) to generate
realistic talking head videos from a static image and audio.
"""
import subprocess
import tempfile
from pathlib import Path
import shutil
import os
import sys

from ..config import AvatarConfig
from ..utils import get_logger


class SadTalkerRenderer:
    """
    Renders avatar using SadTalker AI model.

    Generates realistic talking head videos with proper lip-sync and head movements.
    """

    def __init__(self, config: AvatarConfig):
        self.config = config
        self.logger = get_logger("vidchat.sadtalker")

        # SadTalker installation path
        self.sadtalker_path = Path(config.sadtalker_path) if config.sadtalker_path else Path.home() / "SadTalker"

        if not self.sadtalker_path.exists():
            raise FileNotFoundError(
                f"SadTalker not found at {self.sadtalker_path}. "
                f"Please install SadTalker or update sadtalker_path in config."
            )

        # Source image for avatar
        self.source_image = None
        if config.avatar_image:
            self.source_image = Path(config.avatar_image)
            if not self.source_image.exists():
                self.logger.warning(f"Avatar image not found: {self.source_image}, will use SadTalker default")
                self.source_image = None

        if not self.source_image:
            # Use SadTalker's example image
            example_image = self.sadtalker_path / "examples" / "source_image" / "full_body_1.png"
            if example_image.exists():
                self.source_image = example_image
            else:
                raise FileNotFoundError("No avatar image specified and SadTalker example not found")

        self.logger.info(f"SadTalker initialized with image: {self.source_image}")

    def generate_video(self, audio_path: str, output_path: str | None = None) -> str:
        """
        Generate talking head video from audio.

        Args:
            audio_path: Path to audio file (WAV format)
            output_path: Optional output path (temp file if not provided)

        Returns:
            Path to generated video file
        """
        audio_path = Path(audio_path)

        if not audio_path.exists():
            raise FileNotFoundError(f"Audio file not found: {audio_path}")

        # Create temp output directory
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_output = Path(temp_dir)

            # Run SadTalker inference
            cmd = [
                sys.executable,
                str(self.sadtalker_path / "inference.py"),
                "--driven_audio", str(audio_path),
                "--source_image", str(self.source_image),
                "--result_dir", str(temp_output),
            ]

            # Add optional flags
            if self.config.sadtalker_still_mode:
                cmd.append("--still")

            if self.config.sadtalker_use_enhancer:
                cmd.append("--enhancer")
                cmd.append("gfpgan")

            if self.config.sadtalker_preprocess:
                cmd.extend(["--preprocess", self.config.sadtalker_preprocess])

            self.logger.info(f"Running SadTalker: {' '.join(cmd)}")

            try:
                # Run SadTalker
                result = subprocess.run(
                    cmd,
                    cwd=str(self.sadtalker_path),
                    capture_output=True,
                    text=True,
                    timeout=120  # 2 minute timeout
                )

                if result.returncode != 0:
                    self.logger.error(f"SadTalker failed: {result.stderr}")
                    raise RuntimeError(f"SadTalker generation failed: {result.stderr}")

                # Find generated video
                # SadTalker creates: result_dir/timestamp/source_image_name.mp4
                video_files = list(temp_output.rglob("*.mp4"))

                if not video_files:
                    raise FileNotFoundError(f"No video generated by SadTalker in {temp_output}")

                generated_video = video_files[0]
                self.logger.info(f"SadTalker generated: {generated_video}")

                # Copy to output location
                if output_path is None:
                    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.mp4')
                    output_path = temp_file.name
                    temp_file.close()

                shutil.copy(generated_video, output_path)
                self.logger.info(f"Video saved to: {output_path}")

                return output_path

            except subprocess.TimeoutExpired:
                self.logger.error("SadTalker timed out")
                raise RuntimeError("SadTalker generation timed out (>2 minutes)")
            except Exception as e:
                self.logger.error(f"Error running SadTalker: {e}")
                raise

    def cleanup(self):
        """Cleanup resources."""
        pass
